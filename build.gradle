buildscript {
    repositories {
        jcenter()
        mavenLocal()
        maven {
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.10"
    }
}

apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'com.matthewprenger.cursegradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
apply plugin: 'maven'
apply plugin: 'idea'


idea{
    module{
        inheritOutputDirs = false
        outputDir = compileJava.destinationDir
        testOutputDir = compileTestJava.destinationDir
    }
}

ext.configFile = file "build.properties"

repositories  {
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
}

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}


version = "${config.mcversion}-${config.mod_version}"
group= "com.cjm721.overloaded" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Overloaded"

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

minecraft {
    version = "1.12.2-14.23.4.2718"
    runDir = "run"
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not allways work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20180814"
    replace '${mod_version}', project.config.mod_version
    replace '${FINGERPRINT}', project.findProperty('signSHA1')
    replaceIn "Overloaded.java"
    serverRunArgs = ["nogui"]
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

dependencies {
    deobfCompile ("mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.22-13:api") { transitive = false }

    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:+"
    testCompile "com.google.truth:truth:+"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.findProperty('keyStore')
    alias = project.findProperty('keyStoreAlias')
    storePass = project.findProperty('keyStorePass')
    keyPass = project.findProperty('keyStoreKeyPass')
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}

reobfJar.finalizedBy(signJar)

curseforge {
    apiKey = project.findProperty('curseForgeAPIKey')
    project {
        id = '264601'
        changelog = file('CHANGELOG.md') // A file can also be set using: changelog = file('changelog.txt')
        changelogType = 'markdown'
        releaseType = 'release'
    }
}