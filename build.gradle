buildscript {
    repositories {
        mavenLocal()
        maven {
            url = "http://files.minecraftforge.net/maven"
        }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'net.minecraftforge.gradle'
//Only edit below this line, the above code adds and enables the nessasary things for Forge to be setup.
apply plugin: 'maven'
apply plugin: 'idea'


idea{
    module{
        for (String excludeDirName in ["run", "out", "ouput", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

repositories  {
    maven {
        name 'tterrag maven'
        url "http://maven.tterrag.com/"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        url "http://tehnut.info/maven"
    }
}

group= "com.cjm721.overloaded"
archivesBaseName = "Overloaded"
sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: '20190621-1.14.2'

    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                overloaded {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                overloaded {
                    source sourceSets.main
                }
            }
        }
    }
//    replace '${mod_version}', project.config.mod_version
//    replace '${FINGERPRINT}', project.findProperty('signSHA1')
//    replaceIn "Overloaded.java"
}

jar {
//	duplicatesStrategy = DuplicatesStrategy.FAIL
//    from sourceSets.main.output.classesDirs
//    from sourceSets.main.output.resourcesDir

    manifest {
        attributes([
                "Specification-Title": "Overloaded",
                "Specification-Vendor": "cjm721",
                "Specification-Version": project.version,
                "Implementation-Title": project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" :"cjm721",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }

//    destinationDir = file (rootProject.getRootDir().getPath() + '/output')
}

dependencies {
    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:+"
    testCompile "com.google.truth:truth:+"

    minecraft 'net.minecraftforge:forge:' + minecraft_version + '-' + '26.0.43'
}

version = "${minecraft_version}-${mod_version}"

processResources {
    exclude '**/*.xcf'
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'

        expand 'version': project.version, 'mcversion': minecraft_version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}